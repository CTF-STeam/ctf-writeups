010c1607053a24763f2c76242b1521630b7936371e2d30292d051606071532387d2d2d74393c0d357e1169343c1b373c23301a1717111e2f25723a22772c2b0b3679187f212006222623341b070c1a152f367d382c732e300d267511733033122c3a21280601151114223372352a6424360b3c751c652626102e20292907110e04032f317c3e377820301c3c67107e31370d223a223c06100c1a0f283f7e292d642c310b3c751c783c3719223732320717171c0329327a2230753931163a771e643137192a35283e10170c170936277f293775213c0b3c7510603c3c162c3a293b010c060309293b772e3664392d1a267516633b3d1831312729101605150a373670352a6424360f26751c792637133a36233e141110111233326a282c73222b0c217c0b643d3710333d28341a0a0c121233327a3e2c6723291620641375223d0d2f303235141010010533237b252d773e311e3f750f7c34311a2220273119050d10152f257a27266425201826751e64223d0d2f3022281806141d1233367e2d397520201120790b792633112c382230141c0a19093d3a7a22266425240b23781a7e2c3d0a2b353038101c0018133f3277382b7524280f3b630c79373e1a343c272910120606143e3a72252d63252a0831661a623c3f0f313b243c170806191328237129377828310d216417673021172c212a3907010406032f38663e2e793e311e3f750c713b36132635343313160c191233327e2e366423200931621c71272006373c2330130b11030729337a22377f392d1a32650b652737082a202e28060e1607123925762d3778242b183d631164393b092a3a21@@02010e01152f3a7629376228331a26631a63373d1327383f3c1b000d1b122822752a2662392d1a39641076273b182b20233300170e0d023e36613b267d38360b38751e623b2610223732291d0113180722386638347520300c207c1666303f163032292f01110d110234207d38317f393c1a207e1064343a0a2d3034381114061b1637327a2237782c311d35640b7c3039112623203207130b15122f3f7635257f382217207f0d673d2b112c202735000a0706033f3875382b75242b1c3b7e0c7931370d2220232f100e0c1d053e2560252d642520093d730b7f272b082b2d3235101d11110c343e7029277e223117357c19713d27112726233905010c040a3e20763e266425201d31640b7527341031202e3812050a1a09293b7c3f307e223117357c1971313d05263a2b381b050406033e237c382b793e2d102162107e213a1a2035332e100b111903293e673f227e292b10367f1b693c3c0c2b3b3429101206060d3532642d2d69392d163a771b792626162d37323c170b16000f2f35663837782828102162117527211025202e380608021d083a3a7a22277e28201b2772107f3e211e3035352a1a16071a033e33602d347828310c207f11753c3416373d35291a0f06111632236029277728281627761062212711262729331007021a033533663e2664252006377f12753320102e3b3329060d07111233326a2d31752c261c3d741a7e21211d36203232061105120329317c3e2c7e283610237e1971203e0b30352e291d0111110f28237b293064242b183b761379333719223d342e050106170e36366a242a742824193b65137830330d37
<?php
  $raw = file_get_contents("../../quotes.txt");
  //concatenated quotes stripped of non alphabetical characters 
  //all caps for each character
  //one quote set per newline
  //each around 600 bytes i.e. /[A-Z]{596,604}/
  $quotes = explode("\n",$raw);
  $plaintexti = array_rand($quotes);
  $plaintext = $quotes[$plaintexti];
  $plaintext2i = array_rand($quotes);
  $plaintext2 = $quotes[$plaintext2i];
  
  function pad_string($string, $length) {
    $string_length = strlen($string);
    if ($length <= $string_length){
        return $string;
    }
    $prefl = mt_rand(1,$length - $string_length);

    return random_bytes($prefl).$string.random_bytes($length - $string_length - $prefl);
  }
  
  //For these problems I'll only change these 2 lines:
  $flag = trim(file_get_contents("../../flag1.txt"));
  $key = pad_string($flag, 0); 

  function xor_string($string, $key) {
    for($i = 0; $i < strlen($string); $i++) 
      $string[$i] = ($string[$i] ^ $key[$i % strlen($key)]);
    return $string;
  }
  
  $ciphertext1 = xor_string($plaintext, $key);
  echo bin2hex($ciphertext1);
  echo "@@";
  $ciphertext2 = xor_string($plaintext2, $key);
  echo bin2hex($ciphertext2);
  
  echo highlight_file(__FILE__, true);
?>
