from Crypto.Util.number import GCD, inverse, long_to_bytes

def find_gcd(x):
    global ns
    for n in ns:
        g = GCD(n, x)
        if g > 1:
            print('Found gcd:')
            print('n:', n)
            print('g:', g)
            return True
    return False

file1 = open('data.txt', 'r') 
ns = []

while True:
    line = file1.readline()
    if not line:
        break
    line = line.strip()
    if line.startswith('N ='):
        x = int(line[4:])
        if find_gcd(x):
            break
        ns.append(x)
file1.close()

n = 1044675164824986846129543964323608613365239680035050252309494645560933822495518446693304022545590319250546525917168399204764678403257298239326129871158919542816218522340984947569748736201038021562816693966924400895131581202209979137039587827043069759454164120855768570293040422752468917785328903408605370950147996876990208358475375594571686252344696882915863494868517543555969122658629944307384430218419288165680697232857043139175150441659621685161413451613398831667175512454729439544470980027349070325508634061508993763386825977179617806801029022920480025352780619548143017939443655057389024425570169228248098980467
p = 122729982972357710071120783727698370125411894607728617519003563622984525054174333445026804144720321274997906260185559009090420423079330268357277134063890629114703567569644183661863552585124188304024136941510038967005092399122363417028090533303039853776861602963291379091299524397561628163281339307387789616511
q = n // p
e = 65537
c = 453165863027122723418459069394402037400426672729906522450238794817676497042539789529308473608985338158994624249883914701356065858420024936828432022272815467061637684901837317738582916239288541742659752150404075215515091665116386459932013381382095773299832124142700128326189681687411350253946830383713239134469716400272927362394412257851406491373814752425056006370289276487790940562296517433643679888710879174066975093477322635567260025858922630156400038895086233808658679535589160056745197601926085078972013345841371043379787995066583974340356129368947421571141552983767114399461714932369524809191094256220576232096
phi = (p - 1) * (q - 1)
d = inverse(e, phi)
pt = pow(c, d, n)
print(long_to_bytes(pt))

