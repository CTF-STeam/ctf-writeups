from Crypto.Util.number import inverse, long_to_bytes
import gmpy2

a = 0xe64a5f84e2762be5
chunk_size = 64

def gen_prime_froms(bits, s):
    p = 0
    print('s', hex(s))
    for _ in range(bits // chunk_size):
      p = (p << chunk_size) + s
      s = a * s % 2**chunk_size
      print(hex(s))
    if gmpy2.is_prime(p):
      return p
    else:
      return 0

n = 0xab802dca026b18251449baece42ba2162bf1f8f5dda60da5f8baef3e5dd49d155c1701a21c2bd5dfee142fd3a240f429878c8d4402f5c4c7f4bc630c74a4d263db3674669a18c9a7f5018c2f32cb4732acf448c95de86fcd6f312287cebff378125f12458932722ca2f1a891f319ec672da65ea03d0e74e7b601a04435598e2994423362ec605ef5968456970cb367f6b6e55f9d713d82f89aca0b633e7643ddb0ec263dc29f0946cfc28ccbf8e65c2da1b67b18a3fbc8cee3305a25841dfa31990f9aab219c85a2149e51dff2ab7e0989a50d988ca9ccdce34892eb27686fa985f96061620e6902e42bdd00d2768b14a9eb39b3feee51e80273d3d4255f6b19
e = 0x10001
c = 0x6a12d56e26e460f456102c83c68b5cf355b2e57d5b176b32658d07619ce8e542d927bbea12fb8f90d7a1922fe68077af0f3794bfd26e7d560031c7c9238198685ad9ef1ac1966da39936b33c7bb00bdb13bec27b23f87028e99fdea0fbee4df721fd487d491e9d3087e986a79106f9d6f5431522270200c5d545d19df446dee6baa3051be6332ad7e4e6f44260b1594ec8a588c0450bcc8f23abb0121bcabf7551fd0ec11cd61c55ea89ae5d9bcc91f46b39d84f808562a42bb87a8854373b234e71fe6688021672c271c22aad0887304f7dd2b5f77136271a571591c48f438e6f1c08ed65d0088da562e0d8ae2dadd1234e72a40141429f5746d2d41452d916
inv = inverse(a, 1 << 64)

p = 167461936146941692808939238559723903904589379620207365856435661904227540273185533282779620832493652359732389187276902379142621888078961670978916283388822720162862390495893031405602714313316640602365119561659982719282668988525122167719081985320347860761282314656855850439607581955577771993050417459097220423369
q = 151729544448833766074795991984166560588037474222124973634953941257020672843899383140960179476120912590094597992853169555086422594623326845252020095142378704984010226115089909787819012122300316092395286276762637525629246868227290550911568835756327100569045680952559845872937772517829703881520826292230776111593
n = 0xc9470688085a2633d2dc1e580a88a074a11aadcfcff6f45fced2653773057e7628fb903bc9985e8358fd435f46ab700264e5640f085952bbb4737b23477124574910901d439f09b1168ff753754f5816589def636c896b12435418ce28f73ec917fae08c3719aebbae0c183e859375a3e60889c811bfe656415e405798b99585f114d19fe29bd162435fca0b108ccc6c4251988953c297db10aa22ab0da3f4c31e7a4821d4e5627e97a03ad93c3e19f64dc0f9739056cb916a7255ab73c714a8c3e73053a81370dd97f3c4e80cdbbdfc90775cf7dac340e7f69e41df4e81af4c4d6632787486f40033a946d8fa1e18414c136c9d1eb31c54815daf2325340df1
assert p * q == n
p0 = 0xee79453fbeca520d
p14 = 0x221edea2c43a2115
p15 = 0x33961c63153c1ec9
q0 = 0xd811ee5e5da445ad
q14 = 0x7f747af6b993c5b5
q15 = 0x5c498adabed341e9
assert p15 == p % 2**64
assert q15 == q % 2**64
assert p15 == p14 * a % 2**64
assert p14 == p15 * inv % 2**64
assert q15 == q14 * a % 2**64
assert q14 == q15 * inv % 2**64
assert p14 == p0 * a**14 % 2**64
assert p15 == p0 * a**15 % 2**64
assert q14 == q0 * a**14 % 2**64
assert q15 == q0 * a**15 % 2**64
assert q0 == q15 * inverse(a**15, 1 << 64) % 2**64
assert p14 * q15 % 2**64 == p15 * q15 * inv % 2**64
assert p15 * q14 % 2**64 == p15 * q15 * inv % 2**64
assert p14 * q15 % 2**64 == p15 * q14 % 2**64
assert gen_prime_froms(1024, p0) == p

print(n % 2**64)
print(p15 * q15 % 2**64)

x = (n >> 64) % 2**64
print(x)
y = (p14 * q15 + p15 * q14) % 2**64
print(y)
z = x - y
print(z)
print((p15 * q15) // 2**64)
print("=== Solving test ===")
r = n % 2**64 # p15 * q15
y = 2 * r * inv % 2**64
z = x - y
p15q15 = z * 2**64 + r
print(p15q15)
assert p15q15 == p15 * q15
print('[+] Solved: ', p15q15)

print("=== Solving challenge ===")
n = 0xab802dca026b18251449baece42ba2162bf1f8f5dda60da5f8baef3e5dd49d155c1701a21c2bd5dfee142fd3a240f429878c8d4402f5c4c7f4bc630c74a4d263db3674669a18c9a7f5018c2f32cb4732acf448c95de86fcd6f312287cebff378125f12458932722ca2f1a891f319ec672da65ea03d0e74e7b601a04435598e2994423362ec605ef5968456970cb367f6b6e55f9d713d82f89aca0b633e7643ddb0ec263dc29f0946cfc28ccbf8e65c2da1b67b18a3fbc8cee3305a25841dfa31990f9aab219c85a2149e51dff2ab7e0989a50d988ca9ccdce34892eb27686fa985f96061620e6902e42bdd00d2768b14a9eb39b3feee51e80273d3d4255f6b19
x = (n >> 64) % 2**64
print(x)
r = n % 2**64 # p15 * q15
y = 2 * r * inv % 2**64
z = x - y
p15q15 = z * 2**64 + r
print(p15q15)
print('[+] Solved: ', p15q15)


#(p14 * 2**64 + p15)(q14 * 2**64 + q15)
#p14q14 * 2**128 + (p14q15 + p15q14) * 2**64 + p15q15

p15 = 11 * 13 * 109 * 223 * 1290533 * 4608287 
q15 = 167541865434116759 * 13
print(p15)
print(q15)
print(1 << 64)
q0 = q15 * inverse(a**15, 1 << 64) % 2**64
q = gen_prime_froms(1024, q0)
assert q != 0
p = n // q
assert p * q == n
print('p', p)
print('q', q)
phi = (p - 1) * (q - 1)
print('phi', phi)
d = inverse(e, phi)
print('d', d)
pt = pow(c, d, n)
print(long_to_bytes(pt))
