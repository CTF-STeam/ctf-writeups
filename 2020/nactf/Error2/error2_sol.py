from functools import reduce
from itertools import product
from binascii import unhexlify

#enc = '010011011010011010100011011001111110111101000101010011110111010101110110100110001100000111011101100100101111011010110001010011001110011010101111010111111010111010110111010111110110100110011011001101101101011101000111101000110100001010110100100001110110011110111011111101111000001100100011011010010111101100100100000011001101000001001010100000100111001011111101'
enc = '011010100100111010010011110010110110110010010010011100001111101101101000110100110000010011100010001001110000110111100100110111111110101000101011011010000111100001000111001110010111001101011100011101111011100111111000101001110000011101011110010111111110001101110000011010010011101010010110101010001000011100101110100000101110000010110010100010101111010110001101001100001000101100100011111000100001110001100110001110101011010001111001111001101001110000110000111011001000010110001001010111111010101100010011011001110110111001100111101001001100110100100110001000101010111011101010110000111001011100111001'
enc = [enc[i:i + 15] for i in range(0, len(enc), 15)]
print(enc)

def correct(x, a, b, c, d):
    x = [int(i) for i in x]
    #print(x)
    parity = [x[a], x[b], x[c], x[d]]
    x = [k for j, k in enumerate(x) if j not in (a, b, c, d)]
    for j in range(4):
        x.insert(2 ** j - 1, parity[j])
    #print([j for j, bit in enumerate(x) if bit])
    pos = reduce(lambda a, b: int(a) ^ int(b), [j + 1 for j, bit in enumerate(x) if bit])
    if pos > 15:
        return ''
    x[pos - 1] = int(not x[pos - 1])
    #print(x)
    x = [k for j, k in enumerate(x) if j not in (0, 1, 3, 7)]
    x = ''.join([str(i) for i in x])
    return x

for a, b, c, d in product(range(15), range(15), range(15), range(15)):
    flag = ''.join(correct(x, a, b, c, d) for x in enc)
    try:
        flag = unhexlify('%x' % int(flag, 2))
        if b'nactf{' in flag:
            print(flag)
    except:
        continue
print('Done')
